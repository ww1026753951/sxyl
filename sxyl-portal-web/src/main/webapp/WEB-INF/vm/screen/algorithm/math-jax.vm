<!DOCTYPE html>
<meta charset="utf-8">
<style>
    /*.axis {*/
        /*font: 10px sans-serif;*/
    /*}*/
    /*.axis path,*/
    /*.axis line {*/
        /*fill: none;*/
        /*stroke: #000;*/
        /*shape-rendering: crispEdges;*/
    /*}*/

</style>
<head>

    <script src="/js/math/MathJax.js?config=TeX-MML-AM_SVG"></script>
    <script src="/js/math/latest.js?config=TeX-MML-AM_SVG" ></script>

</head>
<body>
<span>$$x = {-b \pm \sqrt{b^2-4ac} \over 2a}$$</span>

<div id="MathDiv">
    The answer you provided is: $$y = {y+1}$$.
</div>

<button onclick="mathjaxTest()" >sdfsdf
</button>
<script src="//d3js.org/d3.v3.js"></script>
##<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_SVG">
##
##</script>

##<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_SVG' ></script>
##<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_SVG' ></script>
</body>


<script>

    function mathjaxTest() {
        // debugger
        var math = MathJax.Hub.getAllJax("MathDiv")[0];
        MathJax.Hub.Queue(["Text",math,"x+1"]);
    }

    // MathJax.Hub.Config({
    //     tex2jax: {
    //         inlineMath: [ ['$','$'], ["\\(","\\)"] ],
    //         processEscapes: true
    //     }
    // });

    var margin = {
                top: 50,
                right: 50,
                bottom: 50,
                left: 50
            },
            width = 500 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom,
            radius = Math.min(width,height)/2;

    var svg = d3.select("body").append("svg")
            .attr("width", width + margin.left + margin.right+200)
            .attr("height", height + margin.top + margin.bottom+200)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    svg.append("circle")
            .attr("r", radius)
            .attr("transform", "translate(" + width/2 + "," + height/2 + ")")
            .style("stroke","steelblue")
            .style("stroke-width","2px")
            .style("fill", "none");

    // from http://stackoverflow.com/a/4652513/16363
    function reduce(numerator,denominator){
        var gcd = function gcd(a,b){
            return b ? gcd(b, a%b) : a;
        };
        gcd = gcd(numerator,denominator);
        return [numerator/gcd, denominator/gcd];
    }

    var labels = [
        {val: Math.PI/4, label: "$$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$$"},
        ## {val: Math.PI/2, label: "$sdfsdf$"},
        ## {val: (3 * Math.PI) / 4, label: "$asdfsadfsadf$"},
        ## {val: Math.PI, label: "$sadfsadfj$"},
        ## {val: (5 * Math.PI) / 4, label: "$xcvxcvxcv$$"},
        ## {val: (3 * Math.PI) / 2, label: "$ahfkj$$"},
        ## {val: (7 * Math.PI) / 4, label: "$$cxvkjxvckj$$"},
        ## {val: (2 * Math.PI), label: "$$asdfasfd$$"},
    ]

    labels.forEach(function(d){
        var angle = d.val,
                fudgeX = (angle > Math.PI / 2 && angle < (3 * Math.PI) / 2)  ? -20 : 5,
                fudgeY = (angle > 0 && angle < Math.PI)  ? -25 : 0,
                x = radius *  Math.cos(angle),
                y = radius *  Math.sin(angle);

        var posX = (width/2 + x),
                posY = (height/2 - y);

        svg.append("g")
                .attr("class", "tick")
                .attr("transform", "translate(" + (posX + fudgeX) + "," + (posY + fudgeY)  + ")")
                .append("text")
                .text("$$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$$");
                        // function(){
                        //     return d.label;
                        // }
                // );

        // debugger
        MathJax.Hub.Typeset(svg.node());
        // debugger
        // MathJax.Hub.Queue(["Typeset", MathJax.Hub, svg.node()]);
        MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
        // svg.selectAll('.tick').each(function(){
        //
        //     debugger
        //     // debugger
        //     var self = d3.select(this),
        //             g = self.select('text>div>span>svg');
        //     g.remove();
        //     self.append(function(){
        //         return g.node();
        //     });
        // });

        // debugger


        // debugger
        // a=2
        // svg.append("path")
        //         .attr("d", "M" + width/2 + "," + height/2 + "L" + (width/2 + x) + "," + (height/2 - y))
        //         .style("stroke","steelblue")
        //         .style("stroke-width","2px");
        // debugger;
    });


    // setTimeout(() => {
    //
    //
    MathJax.Hub.Register.StartupHook("End", function() {
        setTimeout(() => {

            debugger

            svg.selectAll('.tick').each(function(){

                // debugger
            var self = d3.select(this),
                    g = self.select('text>div>span>svg');
            g.remove();
            self.append(function(){
                return g.node();
            });
        });
    }, 1000);
    });

    // MathJax.Hub.Queue(["Typeset", MathJax.Hub, svg.node()]);

    }, 1000);


    // debugger
</script>